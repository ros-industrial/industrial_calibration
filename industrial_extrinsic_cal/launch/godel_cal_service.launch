<?xml version="1.0" ?>
<launch>

<node name="rviz" pkg="rviz" type="rviz" args="-d $(find industrial_extrinsic_cal)/config/industrial_extrinsic_calibration.rviz" required="true" />

  <!-- Basler camera node   -->
  <node pkg="aravis_camera_driver" type="aravis_camera_node" name="aravis_camera_node">
    <param name="camera_id" value="Basler-21135423"/>
    <param name="pixel_format" value="bayer_bggr8"/>
    <param name="exposure_mode" value="auto_once"/>
    <param name="exposure_time" value="1000"/>
    <param name="auto_white_balance_once" value="true"/>
    <param name="gain_mode" value="auto_once"/>
    <param name="gain" value="0"/>
    <param name="digital_shift" value="0"/>
    <param name="mtu" value="1500"/>
    <param name="bin_x" value="1"/>
    <param name="bin_y" value="1"/>
    <param name="roi_x" value="0"/>
    <param name="roi_y" value="0"/>
    <param name="roi_width" value="1624"/>
    <param name="roi_height" value="1234"/>
    <param name="frame_rate" value="30"/>
  </node>

  <node pkg="nodelet" type="nodelet" name="image_proc_nodelet"  args="manager"/>
  <node pkg="nodelet" type="nodelet" name="debayer" args="load image_proc/debayer image_proc_nodelet">
    <remap from="image_raw" to="image"/>
  </node>

  <!-- Asus launch for one fixed in work cell -->

  <!-- Define location of camera relative to world_frame    -->
  <node pkg="tf" type="static_transform_publisher" 
                 name="kinect_rgb_frame" 
                 args="3 4 5 0 0 0 world_frame  camera_rgb_optical_frame 100" />

  <node pkg="tf" type="static_transform_publisher" 
                 name="kinect_frame" 
                 args="2 2 2 0 0 0 world_frame  ns1_kinect_depth_optical_frame 100" />


  <!-- Asus launch for one attached to wrist -->
  <arg name="namespace1" value="ns1"/>
  <arg name="sensor_name1" value="$(arg namespace1)_Asus"/>

  <remap from="/$(arg sensor_name1)/depth/points"
	to="/$(arg namespace1)/camera/depth_registered/points"/>
  <include  file="$(find industrial_extrinsic_cal)/launch/single_sensor.launch">
	<arg name="arm_prefix" value="$(arg namespace1)_"/>
	<arg name="camera_name" value="$(arg sensor_name1)"/>
	<arg name="publish_tf" value="true" />
  </include> 


<!-- Launch service which is called to to indicate scene is ready  when someone needs to set a parameter to indicate scene is ready -->
  <node pkg="industrial_extrinsic_cal" type="trigger_service" name="rosSceneTrigger" output="screen" />

<!-- Launch service which is called to to indicate scene is ready  when a robot action is required to update the scene -->
  <node pkg="industrial_extrinsic_cal" type="ros_robot_trigger_action_service" name="rosRobotSceneTrigger" output="screen" />

<!-- Launch the extrinsic calibration service -->
  <node pkg="industrial_extrinsic_cal" type="service_node" name="calibration_service_node" output="screen" >
    <rosparam>
      camera_file: "godel_camera_def.yaml"
      target_file: "circlegrid5x7n7x5.yaml"
      cal_job_file: "godel_caljob.yaml"
      store_results_package_name: "industrial_extrinsic_cal"
      store_results_file_name: "world_to_basler_tf_broadcaster.launch"
    </rosparam>
  </node>

  <!-- Define location of printed target relative to the fixture -->
  <node pkg="tf" type="static_transform_publisher" 
                 name="target_frame" 
                 args="0.070 0.120 0.0 0.707 0.0 0.0 target_tf target_frame 100" /> 
  
  <arg name="controller" value = "fs100" />
  <arg name="robot_ip" default = "192.168.32.6"/>
  <rosparam command="load" file="$(find motoman_sia20d_support)/config/joint_names_sia20d.yaml" />

  <include file="$(find motoman_driver)/launch/robot_state_$(arg controller).launch">
		  <arg name="robot_ip"   value="$(arg robot_ip)" />
  </include>

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <include file="$(find motoman_sia20d_support)/launch/load_sia20d.launch" />


</launch>
