<?xml version="1.0" ?>
<launch>

  <!-- Asus on wrist launch -->
  <arg name="namespace1" value="WristAsus"/>
  <arg name="sensor_name1" value="$(arg namespace1)/WristAsus"/>

  <remap from="/$(arg sensor_name1)/depth/points"
	to="/$(arg namespace1)/camera/depth_registered/points"/>
  <include  file="$(find industrial_extrinsic_cal)/launch/single_sensor.launch">
	<arg name="arm_prefix" value="asus"/>
	<arg name="camera_name" value="WristAsus"/>
	<arg name="publish_tf" value="false" />
	<arg name="device_id" value="2@0" />
  </include> 

<!-- Launch service which when called will move robot and then indicate scene is ready   -->
  <node pkg="industrial_extrinsic_cal" type="ros_robot_trigger_action_service" name="rosRobotSceneTrigger" output="screen" />

<!-- Launch the extrinsic calibration service -->
  <node pkg="industrial_extrinsic_cal" type="service_node" name="calibration_service_node" output="screen" >
    <!--remap from="get_mutable_joint_states" to="calibrated/get_mutable_joint_states" />
    <remap from="set_mutable_joint_states" to="calibrated/set_mutable_joint_states" />
    <remap from="get_mutable_joint_states" to="calibrated/store_mutable_joint_states" /-->
    <rosparam>
      camera_file: "godel_camera_def.yaml"
      target_file: "circlegrid7x5.yaml"
      cal_job_file: "godel_caljob.yaml"
      store_results_package_name: "industrial_extrinsic_cal"
      store_results_file_name: "world_to_basler_tf_broadcaster.launch"
    </rosparam>
  </node>


<!-- NOTE ONE STILL NEEDS TO CALL THE CALIBRATION SERVICE -->

</launch>
